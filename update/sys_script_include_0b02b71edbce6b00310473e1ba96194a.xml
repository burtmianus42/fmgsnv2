<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_forti_fmgintgv2.DataObjectParser</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DataObjectParser</name>
        <script><![CDATA[/* global Class */
/*!
 * DataObject Parser v1.2.1
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Gigzolo Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * DataObjectParser parse an Object hash transposing between dot-notation and a structured heirarchy of Objects/Arrays.
 * Reference: https://github.com/henrytseng/dataobject-parser
 */
// TODO: merge the code to form an object.
var DataObjectParser = Class.create();

DataObjectParser.prototype = {
    initialize: function () {
    },

    type: 'DataObjectParser'
};

/**
 * Dependencies
 */
// True if Object
function _isObject(value) {
    return typeof (value) === 'object' && value !== null;
}

// True if Array
function _isArray(value) {
    return Array.isArray(value);
}

/// True if type is string
function _isString(value) {
    return typeof (value) === 'string';
}

// True if undefined
function _isUndefined(value) {
    return typeof (value) === 'undefined';
}

// True if Number
function _isNumber(value) {
    return typeof (value) === 'number';
}

// True if Boolean
function _isBoolean(value) {
    return typeof (value) === 'boolean';
}

// True if Date object
function _isDate(value) {
    return value instanceof Date;
}

function DataObjectParser($data) {
    this._data = $data || {};
}

/**
 * Given a dot deliminated string set will create an object
 * based on the structure of the string with the desired value
 *
 * @param {[String} $path  path indicating where value should be placed
 * @param {Mixed} $value   the value desired to be set at the location determined by path
 */
DataObjectParser.prototype.set = function ($path, $value) {
    if (!$path || $path === '') return void 0;

    var _self = this;
    var re = /[\$\w-|]+|\[\]|([^\[[\w]\]]|["'](.*?)['"])/g;
    // parse $path on dots, and brackets
    var pathList = $path.match(re);
    var parent = this._data;
    var parentKey;
    var grandParent = null;
    var grandParentKey = null;

    var addObj = function ($obj, $key, $data) {
        if ($key === '[]') {
            $obj.push($data);
        } else {
            $obj[$key] = $data;
        }
    };

    while (pathList.length > 0) {
        parentKey = pathList.shift().replace(/["']/g, '');

        // Number, treat it as an array
        if (!isNaN(+parentKey) || parentKey === "[]") {
            if (!_isArray(parent) /* prevent overwritting */) {
                parent = [];
                addObj(grandParent, grandParentKey, parent);
            }

            // String, treat it as a key
        } else if (_isString(parentKey)) {
            if (!_isObject(parent)) {
                parent = {};
                addObj(grandParent, grandParentKey, parent);
            }
        }
        // Next
        grandParent = parent;
        grandParentKey = parentKey;
        parent = parent[parentKey];
    }

    addObj(grandParent, grandParentKey, $value);
    return this;
};

/**
 * Returns the value defined by the path passed in
 *
 * @param  {String} $path string leading to a desired value
 * @return {Mixed}        a value in an object
 */
DataObjectParser.prototype.get = function ($path) {
    var data = this._data;
    var regex = /[\$\w-|]+|\[\]|([^\[[\w]\]]|["'](.*?)['"])/g;
    //check if $path is truthy
    if (!$path) return void 0;
    //parse $path on dots and brackets
    var paths = $path.match(regex);
    //step through data object until all keys in path have been processed
    while (data !== null && paths.length > 0) {
        if (data.propertyIsEnumerable(paths[0].replace(/"/g, ''))) {
            data = data[paths.shift().replace(/"/g, '')];
        } else {
            return undefined;
        }
    }
    return data;
};

DataObjectParser.prototype.data = function ($data) {
    if (!_isUndefined($data)) {
        this._data = $data;
        return this;
    }
    return this._data;
};

/**
 * "Transposes" data; receives flat data and returns structured
 *
 * @param  {Object}           $data Structured object
 * @return {DataObjectParser} An instance of a DataObjectParser
 */
DataObjectParser.transpose = function ($flat) {
    var parser = (new DataObjectParser());
    for (var n in $flat) {
        if ($flat[n] !== undefined) {
            parser.set(n, $flat[n]);
        }
    }
    return parser;
};

/**
 * "Untransposes" data object; opposite of transpose
 *
 * @param  {Mixed}  $structured A Object or a DataObjectParser
 * @return {Object}             Flat object
 */
DataObjectParser.untranspose = function ($structured) {
    //check to see if $structured is passed
    $structured = $structured || {};
    //handles if an object or a dataObjectParser is passed in
    var structuredData = $structured._data || $structured;

    var traverse = function ($data, $isIndex) {
        var result = [];

        var createMapHandler = function ($name, $data) {
            return function ($item, $i) {
                var name = $name;
                //check if $name is a key of form "hello.world"
                if ((/\./).test($name)) name = '["' + name + '"]';
                //add name to $item.key
                $item.key.unshift(name + ".");
                //return $item.key with updated key
                return {
                    key: $item.key,
                    data: $item.data
                };
            };
        };

        for (var name in $data) {
            var modifiedName;
            // check if current name is an arrays index
            if ($isIndex) modifiedName = "[" + name + "]";
            else modifiedName = name;

            // check if current name is linked to a value
            if (_isString($data[name]) || _isNumber($data[name]) || $data[name] === null || _isBoolean($data[name]) || _isDate($data[name])) {
                if ((/\./).test(name)) modifiedName = '["' + name + '"]';
                result.push({
                    key: [modifiedName],
                    data: $data[name]
                });
            }

            // check if current name is an array
            else if (_isArray($data[name])) {
                // tell traverse next name is an array's index
                var subArray = traverse($data[name], true);
                result = result.concat(subArray.map(createMapHandler(modifiedName, $data)));
            }

            //check if current name is an object
            else if (_isObject($data[name])) {
                var subObject = traverse($data[name], false);
                result = result.concat(subObject.map(createMapHandler(modifiedName, $data)));
            }
        }
        return result;
    };

    var flatArray = traverse(structuredData, false);
    var flatObj = {};

    flatArray.every(function ($item) {
        //check for any dots followed by brackets and remove the dots
        for (var i = 0; i < $item.key.length - 1; i++) {
            var name = $item.key[i];
            var nextName = $item.key[i + 1];
            if ((/^\[/).test(nextName)) {
                $item.key[i] = name.replace(/\.$/, "");
            }
        }
        //join all the keys in flatArray to form one key
        flatObj[$item.key.join("")] = $item.data;
        return true;
    });
    return flatObj;
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jxiang</sys_created_by>
        <sys_created_on>2018-11-30 22:06:52</sys_created_on>
        <sys_id>0b02b71edbce6b00310473e1ba96194a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>DataObjectParser</sys_name>
        <sys_package display_value="Security Operations FortiManager Integration V2" source="x_forti_fmgintgv2">7c729b7edbf5a300310473e1ba9619cf</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Security Operations FortiManager Integration V2">7c729b7edbf5a300310473e1ba9619cf</sys_scope>
        <sys_update_name>sys_script_include_0b02b71edbce6b00310473e1ba96194a</sys_update_name>
        <sys_updated_by>jhsieh</sys_updated_by>
        <sys_updated_on>2019-02-12 00:54:03</sys_updated_on>
    </sys_script_include>
</record_update>
